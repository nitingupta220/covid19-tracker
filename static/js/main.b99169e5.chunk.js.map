{"version":3,"sources":["components/Block.js","actions/index.js","constants/index.js","selectors/index.js","components/BlockContainer.js","components/SelectContainer.js","App.js","reducer/index.js","sagas/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Block","label","value","getAllDataSuccess","payload","type","errorInAPI","error","getCountriesSuccess","getCountriesSuccessData","getCountriesSelector","state","countries","countryDataSelector","countryData","allDetailsSelector","allDetails","connect","dispatch","getAllData","useEffect","Object","keys","length","Container","Row","Col","Card","bg","text","Header","Body","confirmed","recovered","deaths","allCountries","getCountries","getCountryData","country","useState","setCountry","isSearchable","options","onChange","change","changeCountry","onMenuOpen","setTimeout","App","title","this","props","className","Component","initialState","rootReducer","action","assign","map","el","newObject","name","push","concat","watcherSaga","getAllDetails","getAllCountries","takeEvery","call","put","a","fetch","response","json","getCountry","sagaMiddleWare","createSagaMiddleWare","store","createStore","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b99169e5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Block = ({ label, value }) => {\n  return (\n    <>\n      {label ? <p>{label}</p> : null}\n      <div>{value ? value.value : null}</div>\n    </>\n  );\n};\n\nexport default Block;\n","import {\n  GET_ALL_DATA,\n  GET_COUNTRIES,\n  GET_COUNTRY_DATA,\n  GET_ALL_DATA_SUCCESS,\n  ERRRORED,\n  GET_COUNTRIES_SUCCESS,\n  GET_COUNTRY_DATA_SUCCESS,\n} from \"../constants\";\n\nexport function getAllData() {\n  return { type: GET_ALL_DATA };\n}\n\nexport function getCountries() {\n  return { type: GET_COUNTRIES };\n}\n\nexport function getCountryData(data) {\n  return { type: GET_COUNTRY_DATA, payload: data };\n}\n\nexport function getAllDataSuccess(payload) {\n  return { type: GET_ALL_DATA_SUCCESS, payload };\n}\n\nexport function errorInAPI(error) {\n  return { type: ERRRORED, payload: error };\n}\n\nexport function getCountriesSuccess(payload) {\n  return { type: GET_COUNTRIES_SUCCESS, payload };\n}\n\nexport function getCountriesSuccessData(payload) {\n  return { type: GET_COUNTRY_DATA_SUCCESS, payload };\n}\n","export const GET_ALL_DATA = \"GET_ALL_DATA\";\nexport const GET_ALL_DATA_SUCCESS = \"GET_ALL_DATA_SUCCESS\";\nexport const ERRRORED = \"ERRORED\";\nexport const GET_COUNTRIES = \"GET_COUNTRIES\";\nexport const GET_COUNTRIES_SUCCESS = \"GET_COUNTRIES_SUCCESS\";\nexport const GET_COUNTRY_DATA = \"GET_COUNTRY_DATA\";\nexport const GET_COUNTRY_DATA_SUCCESS = \"GET_COUNTRY_DATA_SUCCESS\";\n","export const getCountriesSelector = (state) => state.countries;\n\nexport const countryDataSelector = (state) => state.countryData;\n\nexport const allDetailsSelector = (state) => state.allDetails;\n","import React, { useEffect } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Block from \"./Block\";\nimport { getAllData } from \"../actions\";\nimport { allDetailsSelector } from \"../selectors\";\n\nconst BlockContainer = ({ allDetails, getAllData }) => {\n  useEffect(() => {\n    getAllData();\n  });\n  return (\n    <>\n      {Object.keys(allDetails).length !== 0 ? (\n        <Container>\n          <Row>\n            <Col>\n              <Card bg={\"danger\"} text={\"white\"}>\n                <Card.Header>Total Confirmed</Card.Header>\n                <Card.Body>\n                  <Block value={allDetails.confirmed} />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card bg={\"primary\"} text={\"white\"}>\n                <Card.Header>Total Recovered</Card.Header>\n                <Card.Body>\n                  <Block value={allDetails.recovered} />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card bg={\"secondary\"} text={\"white\"}>\n                <Card.Header>Total Deaths</Card.Header>\n                <Card.Body>\n                  <Block value={allDetails.deaths} />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      ) : null}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  allDetails: allDetailsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getAllData: () => dispatch(getAllData()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockContainer);\n","import React, { useState } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Select from \"react-select\";\nimport { getCountries, getCountryData } from \"../actions\";\nimport Block from \"./Block\";\nimport { getCountriesSelector, countryDataSelector } from \"../selectors\";\n\nconst SelectContainer = ({\n  allCountries,\n  countryData,\n  getCountries,\n  getCountryData,\n}) => {\n  const [country, setCountry] = useState(\"\");\n\n  const onMenuOpen = () => {\n    setTimeout(() => {\n      getCountries();\n      getCountryData();\n    }, 1000);\n  };\n\n  const changeCountry = (country) => {\n    setCountry(country.label);\n    getCountryData(country);\n  };\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col></Col>\n          <Col>\n            <Select\n              isSearchable={false}\n              options={allCountries}\n              onChange={(change) => changeCountry(change)}\n              onMenuOpen={onMenuOpen}\n            />\n          </Col>\n          <Col></Col>\n        </Row>\n      </Container>\n      <br />\n\n      {Object.keys(countryData).length !== 0 ? (\n        <Container>\n          <Row>\n            <Col>\n              <Card bg={\"danger\"} text={\"white\"}>\n                <Card.Header>{`${country}'s Confirmed`}</Card.Header>\n                <Card.Body>\n                  <Block value={countryData.confirmed} />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card bg={\"primary\"} text={\"white\"}>\n                <Card.Header>{`${country}'s Recovered`}</Card.Header>\n                <Card.Body>\n                  <Block value={countryData.recovered} />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card bg={\"secondary\"} text={\"white\"}>\n                <Card.Header>{`${country}'s Deaths`}</Card.Header>\n                <Card.Body>\n                  <Block value={countryData.deaths} />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      ) : null}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  allCountries: getCountriesSelector(state),\n  countryData: countryDataSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCountries: () => dispatch(getCountries()),\n  getCountryData: (country) => dispatch(getCountryData(country)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectContainer);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport BlockContainer from \"./components/BlockContainer\";\nimport SelectContainer from \"./components/SelectContainer\";\n\nclass App extends Component {\n  render() {\n    const { title } = this.props;\n    return (\n      <div className=\"App\">\n        <h1>{title}</h1>\n        <BlockContainer />\n        <br />\n        <SelectContainer />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  title: state.title,\n  allDetails: state.allDetails,\n  countryData: state.countryData,\n});\n\nexport default connect(mapStateToProps)(App);\n","import {\n  GET_ALL_DATA_SUCCESS,\n  GET_COUNTRIES_SUCCESS,\n  GET_COUNTRY_DATA_SUCCESS,\n} from \"../constants\";\n\nconst initialState = {\n  title: \"Covid-19 Tracker\",\n  allDetails: {},\n  countries: [],\n  countryData: {},\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_DATA_SUCCESS:\n      return Object.assign({}, state, {\n        allDetails: action.payload,\n      });\n    case GET_COUNTRIES_SUCCESS:\n      const countries = [];\n      action.payload.countries.map((el) => {\n        const newObject = {};\n        newObject.label = el.name;\n        newObject.value = el.name;\n        return countries.push(newObject);\n      });\n      return Object.assign({}, state, {\n        countries: state.countries.concat(countries),\n      });\n    case GET_COUNTRY_DATA_SUCCESS:\n      return Object.assign({}, state, {\n        countryData: action.payload,\n      });\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import { takeEvery, call, put } from \"redux-saga/effects\";\nimport { GET_ALL_DATA, GET_COUNTRIES, GET_COUNTRY_DATA } from \"../constants\";\nimport {\n  getAllDataSuccess,\n  errorInAPI,\n  getCountriesSuccess,\n  getCountriesSuccessData,\n} from \"../actions\";\n\nfunction* watcherSaga() {\n  yield takeEvery(GET_ALL_DATA, getAllDetails);\n  yield takeEvery(GET_COUNTRIES, getAllCountries);\n  yield takeEvery(GET_COUNTRY_DATA, getCountryData);\n}\n\nfunction* getAllDetails() {\n  try {\n    const payload = yield call(getAllData);\n    yield put(getAllDataSuccess(payload));\n  } catch (error) {\n    yield put(errorInAPI(error));\n  }\n}\n\nasync function getAllData() {\n  const response = await fetch(`https://covid19.mathdro.id/api/`);\n  return await response.json();\n}\n\nfunction* getAllCountries() {\n  try {\n    const payload = yield call(getCountries);\n    yield put(getCountriesSuccess(payload));\n  } catch (error) {\n    yield put(errorInAPI(error));\n  }\n}\n\nasync function getCountries() {\n  const response = await fetch(`https://covid19.mathdro.id/api/countries`);\n  return await response.json();\n}\n\nfunction* getCountryData(action) {\n  try {\n    const payload = yield call(getCountry, action.payload);\n    yield put(getCountriesSuccessData(payload));\n  } catch (error) {\n    yield put(errorInAPI(error));\n  }\n}\n\nasync function getCountry(country) {\n  const response = await fetch(\n    `https://covid19.mathdro.id/api/countries/${country.value}`\n  );\n  return await response.json();\n}\n\nexport default watcherSaga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleWare from \"redux-saga\";\nimport rootReducer from \"../reducer\";\nimport watcherSaga from \"../sagas\";\n\nconst sagaMiddleWare = createSagaMiddleWare();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleWare));\nsagaMiddleWare.run(watcherSaga);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}